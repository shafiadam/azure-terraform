name: Terraform CI

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.9.8

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step to set Azure Environment Variables
      - name: Set Azure Environment Variables
        run: |
          echo "Setting Azure environment variables"

          # Store the JSON string in an environment variable
          AZURE_CREDENTIALS_JSON="${{ secrets.AZURE_CREDENTIALS }}"

          # Parse and export each variable directly from the JSON string using jq
          export AZURE_CLIENT_ID=$(echo "$AZURE_CREDENTIALS_JSON" | jq -r '.clientId')
          export AZURE_CLIENT_SECRET=$(echo "$AZURE_CREDENTIALS_JSON" | jq -r '.clientSecret')
          export AZURE_TENANT_ID=$(echo "$AZURE_CREDENTIALS_JSON" | jq -r '.tenantId')
          export AZURE_SUBSCRIPTION_ID=$(echo "$AZURE_CREDENTIALS_JSON" | jq -r '.subscriptionId')

          # Set variables in GitHub Actions environment
          echo "AZURE_CLIENT_ID=$AZURE_CLIENT_ID" >> $GITHUB_ENV
          echo "AZURE_CLIENT_SECRET=$AZURE_CLIENT_SECRET" >> $GITHUB_ENV
          echo "AZURE_TENANT_ID=$AZURE_TENANT_ID" >> $GITHUB_ENV
          echo "AZURE_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID" >> $GITHUB_ENV
        shell: bash

      # Step to check for required environment variables
      - name: Check Required Environment Variables
        run: |
          if [ -z "$AZURE_CLIENT_ID" ] || [ -z "$AZURE_CLIENT_SECRET" ] || [ -z "$AZURE_TENANT_ID" ] || [ -z "$AZURE_SUBSCRIPTION_ID" ]; then
            echo "One or more required environment variables are missing."
            exit 1
          fi
          echo "All required environment variables are set."

      - name: Initialize Terraform
        run: |
          terraform init -input=false
          echo "Terraform initialization completed successfully."
        working-directory: ./Hub

      - name: Validate Terraform
        run: |
          terraform validate
          echo "Terraform validation completed successfully."
        working-directory: ./Hub

      # Increase logging level and set a timeout for the Plan step
      - name: Plan Terraform
        timeout-minutes: 15  # Timeout to prevent indefinite hanging
        env:
          TF_LOG: DEBUG  # Enable detailed logging
        run: |
          terraform plan -out=tfplan
          echo "Terraform plan created successfully."
        working-directory: ./Hub

      - name: Apply Terraform
        if: success()
        run: |
          terraform apply -auto-approve tfplan
          echo "Terraform apply completed successfully."
        working-directory: ./Hub
